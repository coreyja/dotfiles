#!/usr/bin/env bash

# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png
# Heavily inspired by @necolasâ€™s prompt: https://github.com/necolas/dotfiles
# iTerm â†’ Profiles â†’ Text â†’ use 13pt Monaco with 1.1 vertical spacing.

prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isnâ€™t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}${branchName}${2}${s}";
	else
		return;
	fi;
}

tput sgr0; # reset colors
bold=$(tput bold);
reset=$(tput sgr0);
black=$(tput setaf 0);
red=$(tput setaf 1);
green=$(tput setaf 2);
yellow=$(tput setaf 3);
blue=$(tput setaf 4);
purple=$(tput setaf 5);
orange="$(tput setaf 6)";
white=$(tput setaf 7);

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${red}";
else
	userStyle="${orange}";
fi;

function last_status_indicator() {
  local last_status=$?

  if [ "$last_status" -eq "0" ] ; then
    echo "ðŸš€"
  else
    echo "ðŸ’©"
  fi
}

function prompt() {
  local PS1='';
  PS1+="\n"
  PS1+='$(last_status_indicator) '
  PS1+="$userStyle\u$reset"
  PS1+="$white in "
  PS1+="$green\w$reset"
  PS1+='$(prompt_git "$white on $purple" $blue)'
  PS1+='\n'
  PS1+="$reset"
  PS1+='ðŸ’œ '
  PS1+="$reset"
  echo "$PS1"
}

PS1="$(prompt)";
export PS1;

PS2="\[${yellow}\]â†’ \[${reset}\]";
export PS2;
